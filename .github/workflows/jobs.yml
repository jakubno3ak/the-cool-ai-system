name: Deploy and Build Infrastructure

on:
  push:
    branches: [ master ]
  
jobs:
  create_ecr:
    name: Create ECR Repository with Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.4.0'

      - name: Change to infra directory
        run: cd infra

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Apply (Create ECR)
        run: |
          cd infra
          terraform apply -target=aws_ecr_repository.ecr -auto-approve


  build_and_push:
    name: Build and Push Image to ECR
    runs-on: ubuntu-latest
    needs: create_ecr
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry lock && poetry install --no-root

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build and Push Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          poetry run python src/save_model.py
          TAG=$(poetry run bentoml build --containerize -o tag)
          TAG=$(echo $TAG | awk -F ':' '{print $NF}')
          docker tag iris_classifier:$TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest